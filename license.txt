Model Information:
* title:	Nissan Silvia S15 (kicker)
* source:	https://sketchfab.com/3d-models/nissan-silvia-s15-kicker-d7bb4e30666d4161be0225975435eb02
* author:	BadKarma™ (https://sketchfab.com/890244234)

Model License:
* license type:	CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
* requirements:	Author must be credited. Commercial use is allowed.

If you use this 3D model in your project be sure to copy paste this credit wherever you share it:
This work is based on "Nissan Silvia S15 (kicker)" (https://sketchfab.com/3d-models/nissan-silvia-s15-kicker-d7bb4e30666d4161be0225975435eb02) by BadKarma™ (https://sketchfab.com/890244234) licensed under CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)




import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.module.js";
import { GLTFLoader } from "https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/loaders/GLTFLoader.js";
import { OrbitControls } from "https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js";

let currentModelIndex = 0;
let models = [];

function loadModels() {
    const loader = new GLTFLoader();
    const modelPaths = ["scene.gltf", "scene.gltf", "scene2.gltf"];

    modelPaths.forEach((path, index) => {
        loader.load(path, (gltf) => {
            const model = gltf.scene;
            model.position.set(0, 1.05, 8 * index); // Adjust the position of each model
            scene.add(model); // Add each model to the scene when loaded
            models.push(model);
        });
    });
}


function navigateNext() {
    if (currentModelIndex < models.length - 1) {
        const nextModelIndex = currentModelIndex + 1;
        moveModel(models[currentModelIndex], models[nextModelIndex]);
        currentModelIndex = nextModelIndex;
    }
}

function navigatePrevious() {
    if (currentModelIndex > 0) {
        const prevModelIndex = currentModelIndex - 1;
        moveModel(models[currentModelIndex], models[prevModelIndex]);
        currentModelIndex = prevModelIndex;
    }
}

function moveModel(fromModel, toModel) {
    const startPosition = fromModel.position.clone();
    const endPosition = toModel.position.clone();
    
    new TWEEN.Tween(startPosition)
        .to(endPosition, 1000) // adjust the duration as needed
        .easing(TWEEN.Easing.Quadratic.Out) // adjust the easing function as needed
        .onUpdate(() => {
            fromModel.position.copy(startPosition);
        })
        .start();
}

document.addEventListener("DOMContentLoaded", function() {
    loadModels();
    document.getElementById("prevButton").addEventListener("click", navigatePrevious);
    document.getElementById("nextButton").addEventListener("click", navigateNext);
});

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.outputColorSpace = THREE.SRGBColorSpace;
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setClearColor(0x000000);
renderer.setPixelRatio(window.devicePixelRatio);
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
camera.position.set(4, 5, 11);
camera.lookAt(0, 0, 0);

const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;
controls.enablePan = false;
controls.minDistance = 5;
controls.maxDistance = 20;
controls.minPolarAngle = 0.5;
controls.maxPolarAngle = 1.5;
controls.autoRotate = false;
controls.target = new THREE.Vector3(0, 1, 0);
controls.update();

const groundGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);
groundGeometry.rotateX(-Math.PI / 2);
const groundMaterial = new THREE.MeshStandardMaterial({
    color: 0x555555,
    side: THREE.DoubleSide
});
const groundMesh = new THREE.Mesh(groundGeometry, groundMaterial);
scene.add(groundMesh);

const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
scene.add(ambientLight);

// Adding lights for better illumination
const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
directionalLight.position.set(0, 10, 0); // Positioned above the scene
scene.add(directionalLight);

const bottomLight = new THREE.PointLight(0xffffff, 0.5, 100); // Light from the bottom
bottomLight.position.set(0, -5, 0);
scene.add(bottomLight);

const spotLight = new THREE.SpotLight(0xffffff, 3, 100, 0.2, 0.5);
spotLight.position.set(14, 25, 1);
scene.add(spotLight);

function animate() {
    requestAnimationFrame(animate);
    TWEEN.update();
    controls.update();
    renderer.render(scene, camera);
}


animate();
